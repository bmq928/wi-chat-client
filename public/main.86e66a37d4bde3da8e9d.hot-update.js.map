{"version":3,"sources":["webpack:///./src/pages/app/app.js"],"names":["name","controller","$inject","api","auth","io","self","token","getToken","getData","username","thisUser","getThisUser","_listPeople","$onInit","preProcess","init","onNewConversation","data","console","log","unshift","Messages","id","joinRoom","idConversation","chooseConversation","people","forEach","m","isSent","User","listMessage","curConverName","curConversationId","seenMsg","sendMessageSuccess","unseenMesgNum","receivMsgConver","findInArr","listPeople","msg","length","push","decideSeenYetForConv","getListConversation","resp","list","filter","p","map","isSeenMsgFrom","lastMessFontWeight","numNewMess","connect","onConnect","joinAllRoom","el","sortPeopleByLatestMsg","JSON","parse","listConver","c","arr","predicate","i","sort","a","b","lastMsgSendAtA","lastMsgSendAtB","Date","sendAt","seenMessage","idUser","nameConversation","options","template","controllerAs"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,OAAO,KAAb;;AAEAC,WAAWC,OAAX,GAAqB,CAAC,KAAD,EAAQ,MAAR,EAAgB,IAAhB,CAArB;AACA,SAASD,UAAT,CAAoBE,GAApB,EAAyBC,IAAzB,EAA+BC,EAA/B,EAAmC;;AAE/B,QAAMC,OAAO,IAAb;AACA,QAAMC,QAAQH,KAAKI,QAAL,EAAd;;AAH+B,wBAIZJ,KAAKK,OAAL,EAJY;AAAA,QAIxBC,QAJwB,iBAIxBA,QAJwB;;AAK/B,QAAMC,WAAWP,KAAKQ,WAAL,EAAjB;;AAEA;AACA;AACA,QAAIC,cAAc,EAAlB;;AAEAP,SAAKQ,OAAL,GAAe,YAAY;AACvBC;AACAC;;AAGAX,WAAGY,iBAAH,CAAqB,UAACC,IAAD,EAAU;AAC3BC,oBAAQC,GAAR,CAAY,EAACF,UAAD,EAAZ;AACAL,wBAAYQ,OAAZ,CAAoB;AAChBC,0BAAS,EADO;AAEhBC,oBAAG,CAFa;AAGhBvB,sBAAKkB,KAAKlB;AAHM,aAApB;AAKAmB,oBAAQC,GAAR,CAAY,EAACP,wBAAD,EAAZ;AACAR,eAAGmB,QAAH,CAAY;AACRd,kCADQ;AAERe,gCAAgBP,KAAKK;AAFb,aAAZ;AAIH,SAZD;AAaH,KAlBD;;AAoBAjB,SAAKoB,kBAAL,GAA0B,UAASC,MAAT,EAAiB;;AAEvC;AACAA,eAAOL,QAAP,CAAgBM,OAAhB,CAAwB,aAAK;AACzBC,cAAEC,MAAF,GAAW;AAAA,uBAAMD,EAAEE,IAAF,CAAOrB,QAAP,KAAoBA,QAA1B;AAAA,aAAX;;AAEA,mBAAOmB,CAAP;AACH,SAJD;;AAMAvB,aAAK0B,WAAL,GAAmBL,OAAOL,QAA1B;AACAhB,aAAK2B,aAAL,GAAqBN,OAAO3B,IAA5B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEAM,aAAK4B,iBAAL,GAAyBP,OAAOJ,EAAhC;AACAY,gBAAQR,MAAR;AACH,KArBD;;AAuBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEArB,SAAK8B,kBAAL,GAA0B,UAASlB,IAAT,EAAe;AACrC;AACA;AACA,UAAEZ,KAAK+B,aAAP;AACAnB,aAAKY,MAAL,GAAc;AAAA,mBAAMZ,KAAKa,IAAL,CAAUrB,QAAV,KAAuBA,QAA7B;AAAA,SAAd;AACA;;AAEAS,gBAAQC,GAAR,CAAY,EAACF,UAAD,EAAZ;AACAC,gBAAQC,GAAR,CAAY,EAACP,wBAAD,EAAZ;AACAM,gBAAQC,GAAR,CAAY,MAAZ;AACA,YAAMkB,kBAAkBC,UAAUjC,KAAKkC,UAAf,EAA2B;AAAA,mBAAOC,IAAInB,QAAJ,CAAa,CAAb,EAAgBG,cAAhB,KAAmCP,KAAKO,cAA/C;AAAA,SAA3B,CAAxB;AACA;AACA,YAAGa,mBAAmBA,gBAAgBhB,QAAnC,IAA+CgB,gBAAgBhB,QAAhB,CAAyBoB,MAA3E,EAAkF;AAC9EvB,oBAAQC,GAAR,CAAY,SAAZ;AACAkB,4BAAgBhB,QAAhB,CAAyBqB,IAAzB,CAA8BzB,IAA9B;AACA0B,iCAAqBN,eAArB;;AAGA;AAEH;AACJ,KArBD;;AAyBA,aAASvB,UAAT,GAAsB;AAClBT,aAAKkC,UAAL,GAAkB,EAAlB;AACAlC,aAAK0B,WAAL,GAAkB,EAAlB;AACA1B,aAAK2B,aAAL,GAAqB,EAArB;AACA3B,aAAKK,QAAL,GAAgBA,QAAhB;AACAL,aAAK4B,iBAAL,GAAyB,CAAC,CAA1B;AACA5B,aAAK+B,aAAL,GAAqB,CAArB;;AAEA;AACH;;AAGD,aAASrB,IAAT,GAAgB;AACZ;AACA;AACAb,YAAI0C,mBAAJ,CAAwBtC,KAAxB,EAA+B,EAACG,kBAAD,EAA/B,EAA2C,UAACoC,IAAD,EAAU;AACjDjC,0BAAciC,KAAKC,IAAnB;AACAzC,iBAAKkC,UAAL,GAAkBM,KAAKC,IAAL,CACbC,MADa,CACN;AAAA,uBAAKC,EAAE3B,QAAF,CAAWoB,MAAhB;AAAA,aADM,EAEbQ,GAFa,CAET,aAAK;AACND,kBAAEE,aAAF,GAAkB,CAAEF,EAAEG,kBAAtB;AACA,uBAAOH,CAAP;AACH,aALa,CAAlB;AAMA;AACA3C,iBAAK+B,aAAL,GAAqBS,KAAKO,UAA1B;;AAEAhD,eAAGiD,OAAH;AACAjD,eAAGkD,SAAH,CAAa,YAAM;AACfC,4BAAYV,KAAKC,IAAL,CAAUG,GAAV,CAAc;AAAA,2BAAMO,GAAGlC,EAAT;AAAA,iBAAd,CAAZ;AACH,aAFD;;AAIAmC;AACA;AACA;;;AAYA;AACA,gBAAMxC,OAAO,8MAAb;AACAZ,iBAAK8B,kBAAL,CAAwBuB,KAAKC,KAAL,CAAW1C,IAAX,CAAxB;AACH,SAjCD;AAkCH;;AAED,aAASsC,WAAT,CAAqBK,UAArB,EAAiC;AAC7B;AACA;AACAA,mBAAWjC,OAAX,CAAmB,aAAK;AACpBvB,eAAGmB,QAAH,CAAY;AACRd,kCADQ;AAERe,gCAAgBqC;AAFR,aAAZ;AAIH,SALD;AAMH;;AAED,aAASvB,SAAT,CAAmBwB,GAAnB,EAAwBC,SAAxB,EAAmC;AAC/B;AAD+B;AAAA;AAAA;;AAAA;AAE/B,iCAAcD,GAAd,8HAAmB;AAAA,oBAAVE,CAAU;;AACf,oBAAGD,UAAUC,CAAV,CAAH,EAAiB,OAAOA,CAAP;AACpB;AAJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM/B,eAAO,IAAP;AACH;;AAGD;AACA,aAASP,qBAAT,GAAiC;AAC7BpD,aAAKkC,UAAL,CAAgB0B,IAAhB,CAAqB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC3B,gBAAMC,iBAAiBF,EAAE7C,QAAF,CAAW6C,EAAE7C,QAAF,CAAWoB,MAAX,GAAoB,CAA/B,CAAvB;AACA,gBAAM4B,iBAAiBF,EAAE9C,QAAF,CAAW8C,EAAE9C,QAAF,CAAWoB,MAAX,GAAoB,CAA/B,CAAvB;;AAEA,mBAAQ,IAAI6B,IAAJ,CAASD,eAAeE,MAAxB,IAAkC,IAAID,IAAJ,CAASF,eAAeG,MAAxB,CAA1C;AACH,SALD;;AAOArD,gBAAQC,GAAR,CAAY,EAAC,mBAAkBd,KAAKkC,UAAxB,EAAZ;AACH;;AAED,aAASL,OAAT,CAAiBR,MAAjB,EAAyB;AACrB;AACAR,gBAAQC,GAAR,CAAY,CAACO,OAAOwB,aAApB;AACAhC,gBAAQC,GAAR,CAAYd,KAAK+B,aAAL,GAAqB,CAAjC;AACA,YAAG,CAACV,OAAOwB,aAAR,IAAyB7C,KAAK+B,aAAL,GAAqB,CAAjD,EAAoD;AAChD/B,iBAAK+B,aAAL,GAAqB/B,KAAK+B,aAAL,GAAoB,CAAzC;AACAV,mBAAOwB,aAAP,GAAuB,IAAvB;;AAEA;AACA;AACA;AACAhD,gBAAIsE,WAAJ,CAAgB;AACZC,wBAAOtE,KAAKQ,WAAL,GAAmBW,EADd;AAEZoD,kCAAkBhD,OAAO3B;AAFb,aAAhB,EAGGI,KAAKI,QAAL,EAHH,EAGoB,UAACsC,IAAD,EAAU;;AAE1B3B,wBAAQC,GAAR,CAAY,UAAZ;AACAD,wBAAQC,GAAR,CAAY,EAAC,eAAeO,OAAO3B,IAAvB,EAAZ;AACA,oBAAG,CAAC8C,IAAJ,EAAU3B,QAAQC,GAAR,CAAY,KAAZ,EAAV,KACKD,QAAQC,GAAR,CAAY0B,IAAZ;AACR,aATD;AAUH;AACJ;;AAED,aAASF,oBAAT,CAA8BN,eAA9B,EAA+C;AAC3C;AACA,YAAGA,gBAAgBtC,IAAhB,KAAyBM,KAAK2B,aAAjC,EAAgD;;AAE5C;AACA;AACA;AACA;AACAE,oBAAQ,EAACnC,MAAKM,KAAK2B,aAAX,EAA0BkB,eAAc,KAAxC,EAAR;AACH,SAPD,MAOO;AACHb,4BAAgBa,aAAhB,GAAgC,KAAhC;AACH;AACJ;AAEJ;;kBAEc;AACXnD,cADW;AAEX4E,aAAS;AACLC,+BADK;AAEL5E,8BAFK;AAGL6E,sBAAc;AAHT;AAFE,C","file":"main.86e66a37d4bde3da8e9d.hot-update.js","sourcesContent":["import toastr from 'toastr'\nimport template from './app.html'\nimport './app.scss'\n\nconst name = 'app'\n\ncontroller.$inject = ['api', 'auth', 'io']\nfunction controller(api, auth, io) {\n\n    const self = this\n    const token = auth.getToken()\n    const {username} = auth.getData()\n    const thisUser = auth.getThisUser()\n\n    // a list get from server\n    // it haven't filter the user without messages yet\n    let _listPeople = []\n\n    self.$onInit = function () {\n        preProcess()\n        init()\n\n\n        io.onNewConversation((data) => {\n            console.log({data})\n            _listPeople.unshift({\n                Messages:[],\n                id:6,\n                name:data.name\n            })\n            console.log({_listPeople})\n            io.joinRoom({\n                username,\n                idConversation: data.id\n            })\n        })\n    }\n\n    self.chooseConversation = function(people) {\n\n        // assign a function return isSent\n        people.Messages.forEach(m => {\n            m.isSent = () => m.User.username === username\n            \n            return m\n        })\n        \n        self.listMessage = people.Messages\n        self.curConverName = people.name\n        //console.log({'self.curConverName': self.curConverName})\n        \n        // self.listMessage = people.Messages.map(m => {\n        //     m.isSent = () => m.User.username === username\n            \n        //     return m\n        // })\n\n        self.curConversationId = people.id\n        seenMsg(people)\n    }\n\n    // self.sendMessageSuccess = function(data) {\n    //     ////console.log({'self.listMessage': self.listMessage})\n    //     //console.log({data})\n    //     ++self.unseenMesgNum\n    //     data.isSent = () => data.User.username === username\n    //     // self.listMessage.push(data)\n\n    //     console.log({data})\n    //     console.log({_listPeople})\n    //     const receivMsgConver = findInArr(self.listPeople, msg => msg.Messages[0].idConversation === data.idConversation)\n    //     // console.log({receivMsgConver})\n    //     if(receivMsgConver && receivMsgConver.Messages && receivMsgConver.Messages.length){\n    //         receivMsgConver.Messages.push(data)\n    //         decideSeenYetForConv(receivMsgConver)\n            \n    //         // sortPeopleByLatestMsg()\n    //     }\n    //     else {\n    //         // toastr.warning('wait a few secs')\n    //         console.log({receivMsgConverNewPerson:receivMsgConver})\n            \n    //         const newPeople = _listPeople.filter(p => (p.name === data.User.username ||\n    //             p.name === 'Help_Desk-' + data.User.username))[0]\n    //         if(newPeople) {\n\n    //             newPeople.Messages.push(data)\n    //             newPeople.isSeenMsgFrom = false\n    //             console.log({'self.listPeople':self.listPeople})\n    //             self.listPeople.unshift(newPeople)\n    //             console.log({newPeople})\n    //             console.log({'self.listPeople':self.listPeople})\n    //         }\n    //     }\n        \n    // }\n\n    self.sendMessageSuccess = function(data) {\n        ////console.log({'self.listMessage': self.listMessage})\n        //console.log({data})\n        ++self.unseenMesgNum\n        data.isSent = () => data.User.username === username\n        // self.listMessage.push(data)\n\n        console.log({data})\n        console.log({_listPeople})\n        console.log('asdj')\n        const receivMsgConver = findInArr(self.listPeople, msg => msg.Messages[0].idConversation === data.idConversation)\n        // console.log({receivMsgConver})\n        if(receivMsgConver && receivMsgConver.Messages && receivMsgConver.Messages.length){\n            console.log('receive')\n            receivMsgConver.Messages.push(data)\n            decideSeenYetForConv(receivMsgConver)\n            \n\n            // sortPeopleByLatestMsg()\n            \n        }\n    }\n\n\n\n    function preProcess() {\n        self.listPeople = []\n        self.listMessage= []\n        self.curConverName = ''\n        self.thisUser = thisUser\n        self.curConversationId = -1\n        self.unseenMesgNum = 0\n\n        ////console.log(auth.getThisUser())\n    }\n    \n\n    function init() {\n        // const token = auth.getToken()\n        // const {username} = auth.getData()\n        api.getListConversation(token, {username}, (resp) => {\n            _listPeople = resp.list\n            self.listPeople = resp.list\n                .filter(p => p.Messages.length)\n                .map(p => {\n                    p.isSeenMsgFrom = !(p.lastMessFontWeight)\n                    return p\n                })\n            // ////console.log({'self.listPeople' : self.listPeople})\n            self.unseenMesgNum = resp.numNewMess\n\n            io.connect()\n            io.onConnect(() => {\n                joinAllRoom(resp.list.map(el => el.id))\n            })\n\n            sortPeopleByLatestMsg()\n            // console.log({'listPeople': self.listPeople})\n            // console.log({'listMessage': self.listMessage})\n\n\n\n\n\n\n\n\n\n\n\n            ///test\n            const data = '{\"content\":\"sadf\",\"type\":\"text\",\"idSender\":13,\"idConversation\":12,\"User\":{\"id\":13,\"username\":\"chat5\",\"password\":\"=========================\",\"role\":2,\"color\":\"#46CC12\"},\"sendAt\":\"2018-08-10T09:46:31.302Z\"}'\n            self.sendMessageSuccess(JSON.parse(data))\n        })\n    }\n\n    function joinAllRoom(listConver) {\n        ////console.log({listConver})\n        ////console.log({username})\n        listConver.forEach(c => {\n            io.joinRoom({\n                username,\n                idConversation: c\n            })\n        })\n    }\n\n    function findInArr(arr, predicate) {\n        //console.log({arr})\n        for (let i of arr) {\n            if(predicate(i)) return i\n        }\n\n        return null\n    }\n\n\n    //use after filter people with message\n    function sortPeopleByLatestMsg() {\n        self.listPeople.sort((a, b) => {\n            const lastMsgSendAtA = a.Messages[a.Messages.length - 1]\n            const lastMsgSendAtB = b.Messages[b.Messages.length - 1]\n\n            return  new Date(lastMsgSendAtB.sendAt) - new Date(lastMsgSendAtA.sendAt) \n        })\n\n        console.log({'self.listPeople':self.listPeople})\n    }\n\n    function seenMsg(people) {\n        //console.log({\"self.unseenMesgNum\" :self.unseenMesgNum})\n        console.log(!people.isSeenMsgFrom)\n        console.log(self.unseenMesgNum > 0)\n        if(!people.isSeenMsgFrom && self.unseenMesgNum > 0) {\n            self.unseenMesgNum = self.unseenMesgNum -1\n            people.isSeenMsgFrom = true\n\n            //console.log(people.Messages[0].User.id)\n            //console.log(people.name)\n            //console.log({token: auth.getToken()})\n            api.seenMessage({\n                idUser:auth.getThisUser().id,\n                nameConversation: people.name\n            }, auth.getToken(), (resp) => {\n                \n                console.log('seen msg')\n                console.log({'people.name': people.name})\n                if(!resp) console.log('err')\n                else console.log(resp)\n            })\n        }\n    }\n\n    function decideSeenYetForConv(receivMsgConver) {\n        // console.log(receivMsgConver.name === self.curConverName)\n        if(receivMsgConver.name === self.curConverName) {\n\n            //simulate a people with name is that\n            //just to pass this function \n            //src code is right above\n            //just to make current conversation seen\n            seenMsg({name:self.curConverName, isSeenMsgFrom:false})\n        } else {\n            receivMsgConver.isSeenMsgFrom = false\n        }\n    }\n\n}\n\nexport default {\n    name,\n    options: {\n        template,\n        controller,\n        controllerAs: 'self'\n    }\n}"],"sourceRoot":""}