{"version":3,"sources":["webpack:///./src/components/chatText/chatText.js"],"names":["name","controller","$inject","$sce","self","rules","Object","entries","iconTextRules","regex","toRegex","$onInit","preProcess","text","replaceText","preRegex","str","split","reduce","pre","cur","listIcon","curIcons","regexStr","i","cur_regex_str","length","RegExp","findIcon","obj","filter","listIcons","o","icon","listIconsVerbose","match","val","indexOf","result","_regex","replaceIcon","iconHtml","toHtmlWithIcon","replace","className","options","bindings","template","controllerAs"],"mappings":"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","file":"main.e090855e085eef12fd2e.hot-update.js","sourcesContent":["\n// const iconTextRules = require('./rules');\n// require('../chatText/chatText.css');\n\nimport iconTextRules from './rules.json'\nimport template from './chatText.html'\nimport './chatText.css'\n\nconst name = 'chatText'\n\n\ncontroller.$inject = ['$sce'];\nfunction controller($sce) {\n    let self = this;\n\n    const rules = Object.entries(iconTextRules);\n    const regex = toRegex();\n    // const regex = /(\\:\\)\\))|(\\:\\-\\))/g;\n\n    self.$onInit = function () {\n        preProcess();\n    }\n\n    function preProcess() {\n        self.text = replaceText(self.text);\n        // console.log({'self.text': self.text})\n    }\n\n\n    //change str -> regexable str\n    function preRegex(str) {\n        //console.log({str})\n        return str\n            .split('') //to list char\n            .reduce((pre, cur) => `${pre}\\\\${cur}`, ''); //to string with \\ attach to each char\n    }\n\n    function toRegex() {\n\n        const listIcon = rules\n            .reduce((pre, cur) => {\n                \n                // if(!pre.length) return cur[1];\n\n                \n                // const preIcons = pre[1][\"text-replace\"];\n                const curIcons = cur[1][\"text-replace\"];\n\n\n                // //console.log({pre, cur, curIcons});\n\n                return [...pre, ...curIcons];\n            }, [])\n        //console.log({listIcon});\n        const regexStr = listIcon\n            .reduce((pre, cur, i) => {\n                // //console.log({pre, cur, i})\n                const cur_regex_str = preRegex(cur);\n\n                if (i === 0) return pre + cur_regex_str;\n\n                let str = `${pre}|${cur_regex_str}`;\n\n                if (i === listIcon.length - 1) str += ')';\n\n                return str;\n\n            }, '(')\n\n        // const regexStr = listIcon\n        //     .reduce((pre, cur, i) => {\n        //         // //console.log({pre, cur, i})\n        //         const cur_regex_str = `(${preRegex(cur)})`;\n\n        //         if (i === 0) return pre + cur_regex_str;\n\n        //         let str = `${pre}|${cur_regex_str}`;\n\n        //         if (i === listIcon.length - 1) str += ')';\n\n        //         return str;\n\n        //     }, '(')\n\n        //console.log({regexStr});\n        return new RegExp(regexStr, 'g');\n\n    }\n\n    // function findStr(icon) {\n    //     const obj = rules.find(o => o[1].icon === icon);\n\n    //     if (obj) return obj[\"text-replace\"];\n\n    //     return null;\n    // }\n\n    function findIcon(text) {\n        //console.log('===findIcon==');\n        \n        const obj = rules\n            .filter(o => {\n                const listIcons = o[1][\"text-replace\"];\n                // //console.log({'o[1][text-replace]': o[1][\"text-replace\"]});\n\n                return !!listIcons.filter(i => i === text).length;\n            })[0]\n\n        // //console.log({text});\n        // //console.log({rules});\n        //console.log('obj');\n        //console.log();\n\n        //console.log('XXXX findIcon XXXX');\n\n        if (obj) return obj[1].icon;\n        return null;\n    }\n\n    //without html\n    // function replaceText(str) {\n    //     const listIconsVerbose = str.match(regex);\n    //     //console.log({listIconsVerbose});\n    //     //remove duplicate\n    //     const listIcons = listIconsVerbose.filter((val, i) => listIconsVerbose.indexOf(val) === i);\n\n    //     //console.log({listIcons});\n\n    //     let result = str;\n    //     for (let icon of listIcons) {\n    //         const _regex = new RegExp(preRegex(icon));\n    //         const replaceIcon = findIcon(icon);\n    //         //console.log({replaceIcon});\n    //         if(replaceIcon) result = result.replace(_regex, replaceIcon);\n    //     }\n\n    //     return result;\n    // }\n\n    function replaceText(str) {\n        const listIconsVerbose = str.match(regex);\n        //console.log({listIconsVerbose});\n        //remove duplicate\n        if(!listIconsVerbose || !listIconsVerbose.length) return str;\n        \n        const listIcons = listIconsVerbose.filter((val, i) => listIconsVerbose.indexOf(val) === i);\n\n        //console.log({listIcons});\n\n        let result = str;\n        for (let icon of listIcons) {\n            const _regex = new RegExp(preRegex(icon));\n            const replaceIcon = findIcon(icon);\n            const iconHtml = toHtmlWithIcon(replaceIcon);\n            //console.log({replaceIcon});\n            if(replaceIcon) result = result.replace(_regex, iconHtml);\n        }\n\n        return result;\n    }\n\n    function toHtmlWithIcon(className) {\n        return `<div class=\"${className}\"></div>`\n    }\n}\n\nexport default {\n    name,\n    options: {\n        bindings: {\n            text:'<'\n        },\n        template,\n        controller,\n        controllerAs: 'self'\n    }\n}"],"sourceRoot":""}